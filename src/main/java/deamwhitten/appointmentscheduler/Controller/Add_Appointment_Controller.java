package deamwhitten.appointmentscheduler.Controller;

import deamwhitten.appointmentscheduler.Utils.Collections.*;
import deamwhitten.appointmentscheduler.Utils.Window_Handler;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class Add_Appointment_Controller implements Initializable {
    @FXML
    private TextField appID_input;
    @FXML
    private ComboBox<String> customer_selection;
    @FXML
    private ComboBox<String> contact_selection;
    @FXML
    private ComboBox<String> type_selection;
    @FXML
    private TextField title_input;
    @FXML
    private TextArea description_input;
    @FXML
    private ComboBox<String> country_selection;
    @FXML
    private ComboBox<String> division_selection;
    @FXML
    private DatePicker date_selection;
    @FXML
    private ComboBox<String> start_selection;
    @FXML
    private ComboBox<String> end_selection;
    @FXML
    private Label error_label;


    private static int autoGeneratedAppointmentID;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        try {
            autoGeneratedAppointmentID = Appointments_Collections.getAllAppointments().size() + 1;
            appID_input.setText(String.valueOf(autoGeneratedAppointmentID));
            customer_selection.getItems().addAll(Customers_Collections.getAllCustomersNames());
            type_selection.getItems().addAll(Appointments_Collections.getAllAppointmentTypeOptions());
            contact_selection.getItems().addAll(Contacts_Collections.getAllContactNames());
            country_selection.getItems().addAll(Counties_Collections.getAllCountiesNames());
            start_selection.getItems().addAll(Appointments_Collections.getAllBusinessHoursAppointmentStartTimes());
            end_selection.getItems().addAll(Appointments_Collections.getAllBusinessHoursAppointmentEndTimes());
            //end_selection.getSelectionModel().select("9:00:00");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @FXML
    public void onCountrySelected(ActionEvent event) {
        division_selection.getItems().clear();
        String selectedCounty = country_selection.getSelectionModel().getSelectedItem();
        if(selectedCounty != null){
            division_selection.getItems().addAll(Divisions_Collections.getSelectedDivisionNamesByCountryID(selectedCounty));
        }
        
    }

    @FXML
    public void onCancelClick(ActionEvent event) throws IOException {
        Window_Handler.loadWindow("MainWindow_View","Appointment Scheduler", event);
    }

    @FXML
    public void onScheduleClick(ActionEvent event) throws Exception {
        Boolean isValidInput = validateInputs();
        if(isValidInput){

            Window_Handler.loadWindow("MainWindow_View","Appointment Scheduler", event);
        }
    }

    private Boolean validateInputs() throws Exception {
        Boolean timeOverLap = checkTimes();
        int start = Integer.parseInt(start_selection.getSelectionModel().getSelectedItem().substring(0,1));
        int end = Integer.parseInt(end_selection.getSelectionModel().getSelectedItem().substring(0,1));

        if(!appID_input.getText().isEmpty()){
            if(!customer_selection.getSelectionModel().isEmpty()){
                if(!contact_selection.getSelectionModel().isEmpty()){
                    if(!type_selection.getSelectionModel().isEmpty()){
                        if(!title_input.getText().isEmpty()){
                            if(!description_input.getText().isEmpty()){
                                if(!country_selection.getSelectionModel().isEmpty()){
                                    if(!division_selection.getSelectionModel().isEmpty()){
                                        if(!(date_selection.getValue() == null)){
                                           if(!start_selection.getSelectionModel().isEmpty() && !end_selection.getSelectionModel().isEmpty() && !timeOverLap){
                                               if(start < end && start != end){
                                                   return true;
                                               }else {
                                                   start_selection.getSelectionModel().clearSelection();
                                                   start_selection.requestFocus();
                                                   end_selection.getSelectionModel().clearSelection();
                                                   start_selection.requestFocus();
                                                   error_label.setText("Please select a start " +
                                                           "time that is before the end time.");
                                                   return false;
                                               }
                                           } else {
                                               start_selection.getSelectionModel().clearSelection();
                                               start_selection.requestFocus();
                                               end_selection.getSelectionModel().clearSelection();
                                               start_selection.requestFocus();
                                               error_label.setText("Please select times that dont" +
                                                       " overlap with customers scheduled " +
                                                       "appointments.");
                                               return false;
                                           }
                                        } else {
                                            date_selection.requestFocus();
                                            error_label.setText("Please select an appointment " +
                                                    "date.");
                                            return false;
                                        }
                                    } else {
                                        division_selection.requestFocus();
                                        error_label.setText("Please select the division.");
                                        return false;
                                    }
                                } else {
                                    country_selection.requestFocus();
                                    error_label.setText("Please select the country.");
                                    return false;
                                }
                            }else {
                                description_input.requestFocus();
                                error_label.setText("Please input a description.");
                                return false;
                            }
                        }else {
                            title_input.requestFocus();
                            error_label.setText("Please input a title.");
                            return false;
                        }
                    }else {
                        type_selection.requestFocus();
                        error_label.setText("Please select the appointment type.");
                        return false;
                    }
                }else {
                    contact_selection.requestFocus();
                    error_label.setText("Please select a contact for the appointment");
                    return false;
                }
            }else {
                customer_selection.requestFocus();
                error_label.setText("Please select a customer for the appointment");
                return false;
            }
        } else {
            return false;
        }
    }

    private Boolean checkTimes() throws Exception {

        return Appointments_Collections.checkForAppointmentOverlapByCustomer(customer_selection.getSelectionModel().getSelectedItem(), start_selection.getSelectionModel().getSelectedItem(), date_selection.getValue().toString());

    }


}